cluster: "local"

vault:
  server:
    enabled: true
    image:
      repository: "hashicorp/vault"
      tag: "1.20.2"
      pullPolicy: IfNotPresent

    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      failureThreshold: 6
      path: "/v1/sys/health?standbyok=true&sealedok=true&initialized=true"  # Allow all states during startup

    livenessProbe:
      enabled: true
      path: "/v1/sys/health?standbyok=true&sealedok=true&initialized=true"  # Allow all states during startup
      initialDelaySeconds: 90
      periodSeconds: 30
      failureThreshold: 6

    # Fixed postStart syntax
    postStart:
      - command: 
        - /bin/sh
        - -c
        - |
          # Wait for Vault process to be responsive
          until [ -f /vault/data/init.json ] && vault status > /dev/null 2>&1; do
            echo "Waiting for Vault to be available..."
            sleep 5
          done

          # Check seal status
          if vault status | grep -q "Sealed.*true"; then
            echo "Vault is sealed, attempting to unseal..."
            UNSEAL_KEY=$(grep -o '"unseal_keys_b64":\[[^]]*\]' /vault/data/init.json | grep -o '"[^"]*"' | tail -n1 | tr -d '"')
            if [ ! -z "$UNSEAL_KEY" ]; then
              vault operator unseal $UNSEAL_KEY
              echo "Unseal operation completed"
            fi
          else
            echo "Vault is already unsealed"
          fi

    extraEnvironmentVars:
      VAULT_SKIP_VERIFY: "true"
      VAULT_ADDR: "http://127.0.0.1:8200"

    standalone:
      enabled: true
      config: |
        ui = true
        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        storage "file" {
          path = "/vault/data"
        }
        default_lease_ttl = "768h"
        max_lease_ttl = "768h"

    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

    # Fixed affinity syntax
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: vault
            topologyKey: kubernetes.io/hostname

    dataStorage:
      enabled: true
      size: "10Gi"
      storageClass: "local-path"
      accessMode: ReadWriteOnce

  auth:
    kubernetes:
      enabled: true
      config:
        token_reviewer_jwt_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_host: https://kubernetes.default.svc
        kubernetes_ca_cert_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

  policies:
    - name: cert-manager
      rules: |
        path "secret/data/cert-manager/*" {
          capabilities = ["read"]
        }

  csi:
    enabled: true
    image:
      repository: "hashicorp/vault-csi-provider"
      tag: "1.5.0"

  injector:
    enabled: true
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  serviceAccount:
    create: true
    annotations: {}

  global:
    enabled: true
    tlsDisable: true